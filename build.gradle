apply plugin: "application"
apply plugin: "jacoco"
apply plugin: "java"            // Apply the java plugin to add support for Java
apply plugin: "org.sonarqube"   // Apply SonarQube plugin

// Variables
mainClassName           = "com.majoinen.d.pwcrypt.tracker.PwCryptTracker"
def sonarqubeURL        = "http://d.majoinen.com/sonarqube"


buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1"
    }
}

repositories {
    jcenter()
}

dependencies {
    compile files('libs/DatabaseUtils-1.0.jar')
    compile files('libs/EncryptionUtils-1.0.jar')
    compile     "com.google.code.gson:gson:2.8.1"               // Gson
    compile     "javax.mail:mail:1.5.0-b01"                     // JavaMail
    compile     "javax.mail:javax.mail-api:1.6.0"               // JavaMail-API
    compile     "org.slf4j:slf4j-api:1.7.25"                    // slf4j-api
    compile     "org.slf4j:slf4j-simple:1.7.25"                 // slf4j-simple
    compile     "com.sparkjava:spark-core:2.6.0"                // Spark
    compile     "org.xerial:sqlite-jdbc:3.19.3"                 // SQLite
    testCompile "junit:junit:4.12"                              // JUnit
    testCompile "com.despegar:spark-test:1.1.4"                 // Spark-test
    testCompile "org.mockito:mockito-core:2.8.+"                // Mockito
    testCompile "org.powermock:powermock-module-junit4:1.7.1"   // PowerMock
    testCompile "org.powermock:powermock-api-mockito2:1.7.1"    // PowerMock
}

// Package the app into a jar - optional version number
jar {
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    // If the buildNumber property is provided, name the build accordingly
    if (project.hasProperty('branchName') && project.hasProperty('buildNumber')) {
        version = "$branchName-$buildNumber"
    }
}

// Run code through SonarQube quality tests
sonarqube {
    properties {
        property "sonar.host.url", "$sonarqubeURL"
    }
}

// Display unit tests in the console output
test {
    ignoreFailures = true
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

test.finalizedBy(project.tasks.jacocoTestReport)